{"version":3,"file":"args.js","sourceRoot":"","sources":["../src/args.ts"],"names":[],"mappings":";;AAAA,uBAAyB;AACzB,2BAA6B;AAE7B,6CAAuC;AACvC,2CAA6C;AAC7C,mCAAgC;AAChC,+CAAyE;AACzE,mDAAyD;AAEzD,6BAA8B;AAE9B,IAAM,SAAS,GAAG,UAAC,IAAc;IAC/B,OAAA,qBAAa,CACX,IAAI,CAAC,MAAM,KAAK,CAAC;QACf,CAAC,CAAC,aAAI,CAAC,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAClD,CAAC,CAAC,cAAK,CAAC,IAAI,CAAC,CAChB;AAJD,CAIC,CAAC;AAEJ,IAAM,WAAW,GAAG,UAAC,IAAc;IACjC,OAAA,IAAI,OAAE,CAAC,cAAM,OAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAApC,CAAoC,CAAC;AAAlD,CAAkD,CAAC;AAErD,IAAM,kBAAkB,GAAG,UAAC,IAAc;IACxC,OAAA,IAAI,CAAC,MAAM,GAAG,CAAC;QACb,CAAC,CAAC,cAAI,CAAC,aAAO,CAAC,iCAAiC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,CAAC;YACtD,OAAA,WAAW,CAAC,IAAI,CAAC;QAAjB,CAAiB,CAClB;QACH,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC;AAJrB,CAIqB,CAAC;AAEX,QAAA,WAAW,GAAG,UAAC,IAAc;IACxC,OAAA,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,CACnB,UAAA,EAAE;QACA,OAAA,IAAI,mBAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,cAAK,CAAgB,EAAE,CAAC,EAAxB,CAAwB,CAAC,CAAC;IAAxE,CAAwE,CAC3E;AAHD,CAGC,CAAC;AAES,QAAA,iBAAiB,GAAG,UAAC,IAAY;IAC5C,OAAA,oBAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,EAAJ,CAAI,CAAC;AAArC,CAAqC,CAAC","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\nimport {warn} from 'fp-ts/lib/Console';\nimport {left, right} from 'fp-ts/lib/Either';\nimport {IO} from 'fp-ts/lib/IO';\nimport {IOEither, fromEither as ioeFromEither} from 'fp-ts/lib/IOEither';\nimport {TaskEither, taskify} from 'fp-ts/lib/TaskEither';\n\nimport {WARNING} from './log';\n\nconst checkArgs = (args: string[]): IOEither<Error, string[]> =>\n  ioeFromEither(\n    args.length === 0\n      ? left(new Error('Destination must be specified'))\n      : right(args)\n  );\n\nconst destFromCwd = (args: string[]): IO<string> =>\n  new IO(() => path.resolve(process.cwd(), args[0]));\n\nconst warnAboutExtraArgs = (args: string[]): IO<string> =>\n  args.length > 1\n    ? warn(WARNING('Extra arguments will be ignored')).chain(_ =>\n        destFromCwd(args)\n      )\n    : destFromCwd(args);\n\nexport const destination = (args: string[]): IOEither<Error, string> =>\n  checkArgs(args).chain(\n    as =>\n      new IOEither(warnAboutExtraArgs(as).map(xs => right<Error, string>(xs)))\n  );\n\nexport const checkDestionation = (dest: string): TaskEither<Error, string> =>\n  taskify(fs.stat)(dest).map(_ => dest);\n"]}