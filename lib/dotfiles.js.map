{"version":3,"file":"dotfiles.js","sourceRoot":"","sources":["../src/dotfiles.ts"],"names":[],"mappings":";;AAAA,2BAA6B;AAC7B,2BAA6B;AAE7B,2CAA6C;AAC7C,mCAAgC;AAChC,uCAAoC;AACpC,mDAAwD;AACxD,+CAA4C;AAE5C,2BAA+B;AAC/B,6BAA4C;AAE5C,IAAM,QAAQ,GAAG,UAAC,OAAe;IAC/B,OAAA,IAAI,uBAAU,CACZ,IAAI,WAAI,CACN;QACE,OAAA,IAAI,OAAO,CAAC,UAAA,OAAO;YACjB,OAAA,IAAI,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,IAAI,EAAC,EAAE,UAAC,GAAG,EAAE,OAAO;gBACtC,OAAA,OAAO,CACL,GAAG,CAAC,CAAC,CAAC,aAAI,CAAkB,GAAG,CAAC,CAAC,CAAC,CAAC,cAAK,CAAkB,OAAO,CAAC,CACnE;YAFD,CAEC,CACF;QAJD,CAIC,CACF;IAND,CAMC,CACJ,CACF;AAXD,CAWC,CAAC;AAEJ,IAAM,WAAW,GAAG;IAClB,OAAA,mBAAM,CAAgB,IAAI,OAAE,CAAC,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC,CAAC;SAC3C,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,CAAC,EAAxC,CAAwC,CAAC;SAClD,KAAK,CAAC,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAI,IAAI,OAAI,CAAC,EAArB,CAAqB,CAAC;AAFvC,CAEuC,CAAC;AAE7B,QAAA,YAAY,GAAG,UAAC,IAAY;IACvC,OAAA,WAAW,EAAE;SACV,KAAK,CAAC,UAAA,KAAK;QACV,OAAA,YAAM,CAAC,UAAI,CAAC,6BAA6B,CAAC,CAAC;aACxC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,cAAS,CAAC,KAAK,EAAE,IAAI,CAAC,EAAtB,CAAsB,CAAC;aAClC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,YAAM,CAAC,aAAO,CAAC,+BAA+B,CAAC,CAAC,EAAhD,CAAgD,CAAC;IAF/D,CAE+D,CAChE;SACA,GAAG,CAAC,mBAAQ,CAAC,IAAI,CAAC,CAAC;AANtB,CAMsB,CAAC","sourcesContent":["import * as glob from 'glob';\nimport * as path from 'path';\n\nimport {left, right} from 'fp-ts/lib/Either';\nimport {IO} from 'fp-ts/lib/IO';\nimport {Task} from 'fp-ts/lib/Task';\nimport {TaskEither, fromIO} from 'fp-ts/lib/TaskEither';\nimport {constant} from 'fp-ts/lib/function';\n\nimport {copyFiles} from './fs';\nimport {INFO, SUCCESS, logger} from './log';\n\nconst globTask = (pattern: string): TaskEither<Error, string[]> =>\n  new TaskEither(\n    new Task(\n      () =>\n        new Promise(resolve =>\n          glob(pattern, {dot: true}, (err, matches) =>\n            resolve(\n              err ? left<Error, string[]>(err) : right<Error, string[]>(matches)\n            )\n          )\n        )\n    )\n  );\n\nconst getDotfiles = (): TaskEither<Error, string[]> =>\n  fromIO<Error, string>(new IO(() => __dirname))\n    .map(d => path.resolve(d, '..', 'tpl', 'dotfiles'))\n    .chain(base => globTask(`${base}/*`));\n\nexport const copyDotfiles = (dest: string): TaskEither<Error, string> =>\n  getDotfiles()\n    .chain(files =>\n      logger(INFO('Copy configuration files...'))\n        .chain(_ => copyFiles(files, dest))\n        .chain(_ => logger(SUCCESS('Configuration files installed')))\n    )\n    .map(constant('OK'));\n"]}