{"version":3,"file":"pkg.js","sourceRoot":"","sources":["../src/pkg.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,2BAA6B;AAE7B,2CAAqD;AACrD,mCAAgC;AAChC,mDAAgF;AAChF,+CAA4C;AAE5C,2BAAyC;AACzC,6BAAmC;AAEnC,IAAM,WAAW,GAAG,UAAC,CAAS;IAC5B,IAAI;QACF,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,OAAO,cAAK,CAAC,MAAM,CAAC,CAAC;KACtB;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,aAAI,CAAC,CAAC,CAAC,CAAC;KAChB;AACH,CAAC,CAAC;AAEF,IAAM,QAAQ,GAAG,UAAC,MAAc;IAC9B,OAAA,aAAQ,CAAC,MAAM,EAAE,OAAO,CAAC;SACtB,GAAG,CAAC,uBAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;SACxB,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,uBAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAA1B,CAA0B,CAAC;AAFzC,CAEyC,CAAC;AAE/B,QAAA,aAAa,GAAG,UAAC,QAAgB;IAC5C,OAAA,mBAAM,CAAgB,IAAI,OAAE,CAAC,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC,CAAC;SAC3C,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,EAAtC,CAAsC,CAAC;SAChD,KAAK,CAAC,QAAQ,CAAC;AAFlB,CAEkB,CAAC;AAErB,IAAM,OAAO,GAAG,UAAC,GAAO;IACtB,OAAA,qBAAa,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,cAAK,GAAG,IAAE,IAAI,MAAA,IAAE,EAAhB,CAAgB,CAAC;AAAhE,CAAgE,CAAC;AAEnE,IAAM,UAAU,GAAG,UAAC,GAAO;IACzB,OAAA,qBAAa,CAAC,sBAAsB,CAAC,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,cAAK,GAAG,IAAE,OAAO,SAAA,IAAE,EAAnB,CAAmB,CAAC;AAAzE,CAAyE,CAAC;AAE5E,IAAM,UAAU,GAAG,UAAC,GAAO;IACzB,OAAA,qBAAa,CAAC,sBAAsB,CAAC,CAAC,GAAG,CAAC,UAAA,OAAO;QAC/C,OAAA,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC;IAA/B,CAA+B,CAChC;AAFD,CAEC,CAAC;AAEJ,IAAM,aAAa,GAAG,UAAC,IAAY,EAAE,IAAQ;IAC3C,OAAA,cAAS,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC,KAAK,CAAC;QACjE,OAAA,YAAM,CAAC,UAAI,CAAI,IAAI,aAAU,CAAC,CAAC,CAAC,GAAG,CAAC,mBAAQ,CAAC,IAAI,CAAC,CAAC;IAAnD,CAAmD,CACpD;AAFD,CAEC,CAAC;AAES,QAAA,cAAc,GAAG,UAAC,IAAY;IACzC,IAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IAE5C,OAAO,QAAQ,CAAC,GAAG,CAAC;SACjB,KAAK,CAAC,UAAU,CAAC;SACjB,KAAK,CAAC,UAAU,CAAC;SACjB,KAAK,CAAC,OAAO,CAAC;SACd,KAAK,CAAC,UAAA,OAAO,IAAI,OAAA,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,EAA3B,CAA2B,CAAC,CAAC;AACnD,CAAC,CAAC","sourcesContent":["import * as path from 'path';\n\nimport {Either, left, right} from 'fp-ts/lib/Either';\nimport {IO} from 'fp-ts/lib/IO';\nimport {TaskEither, fromEither, fromIO, taskEither} from 'fp-ts/lib/TaskEither';\nimport {constant} from 'fp-ts/lib/function';\n\nimport {readFile, writeFile} from './fs';\nimport {INFO, logger} from './log';\n\nconst parseToJSON = (x: string): Either<Error, any> => {\n  try {\n    const parsed = JSON.parse(x);\n    return right(parsed);\n  } catch (e) {\n    return left(e);\n  }\n};\n\nconst readJson = (source: string): TaskEither<Error, any> =>\n  readFile(source, 'utf-8')\n    .alt(taskEither.of('{}'))\n    .chain(x => fromEither(parseToJSON(x)));\n\nexport const getPackageTpl = (fileName: string): TaskEither<Error, any> =>\n  fromIO<Error, string>(new IO(() => __dirname))\n    .map(d => path.resolve(d, '..', 'tpl', fileName))\n    .chain(readJson);\n\nconst addJest = (src: {}): TaskEither<Error, {}> =>\n  getPackageTpl('package.jest.json').map(jest => ({...src, jest}));\n\nconst addScripts = (src: {}): TaskEither<Error, {}> =>\n  getPackageTpl('package.scripts.json').map(scripts => ({...src, scripts}));\n\nconst addTypings = (src: {}): TaskEither<Error, {}> =>\n  getPackageTpl('package.typings.json').map(typings =>\n    Object.assign({}, src, typings)\n  );\n\nconst updatePkgJson = (dest: string, json: {}): TaskEither<Error, string> =>\n  writeFile(dest, JSON.stringify(json, null, 2), {flag: 'w+'}).chain(() =>\n    logger(INFO(`${dest} updated`)).map(constant('OK'))\n  );\n\nexport const preparePkgJson = (dest: string): TaskEither<Error, string> => {\n  const pkg = path.join(dest, 'package.json');\n\n  return readJson(pkg)\n    .chain(addTypings)\n    .chain(addScripts)\n    .chain(addJest)\n    .chain(content => updatePkgJson(pkg, content));\n};\n"]}