{"version":3,"file":"fs.js","sourceRoot":"","sources":["../src/fs.ts"],"names":[],"mappings":";;AAAA,uBAAyB;AACzB,2BAA6B;AAE7B,yCAAsC;AACtC,mDAAqE;AACrE,qDAA+C;AAC/C,+CAAkD;AAErC,QAAA,QAAQ,GAAG,UACtB,CAAS,EACT,QAAgB;IAEhB,OAAA,oBAAO,CAAgD,EAAE,CAAC,QAAQ,CAAC,CACjE,CAAC,EACD,QAAQ,CACT;AAHD,CAGC,CAAC;AAES,QAAA,SAAS,GAAG,UACvB,CAAS,EACT,IAAY,EACZ,OAAuB;IAEvB,OAAA,oBAAO,CACL,EAAE,CAAC,SAAS,CACb,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC;AAFnB,CAEmB,CAAC;AAET,QAAA,QAAQ,GAAG,UACtB,IAAY,EACZ,EAAU;IAEV,OAAA,oBAAO,CAA8C,EAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC;AAA3E,CAA2E,CAAC;AAEjE,QAAA,SAAS,GAAG,UACvB,KAAe,EACf,IAAY;IAEZ,OAAA,sBAAQ,CAAC,uBAAU,EAAE,aAAK,CAAC,CACzB,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,gBAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAA9C,CAA8C,CAAC,CAC/D,CAAC,GAAG,CAAC,yBAAc,CAAC;AAFrB,CAEqB,CAAC","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\nimport {array} from 'fp-ts/lib/Array';\nimport {TaskEither, taskEither, taskify} from 'fp-ts/lib/TaskEither';\nimport {sequence} from 'fp-ts/lib/Traversable';\nimport {constUndefined} from 'fp-ts/lib/function';\n\nexport const readFile = (\n  p: string,\n  encoding: string\n): TaskEither<NodeJS.ErrnoException, string> =>\n  taskify<string, string, NodeJS.ErrnoException, string>(fs.readFile)(\n    p,\n    encoding\n  );\n\nexport const writeFile = (\n  p: string,\n  data: string,\n  options: {flag: string}\n): TaskEither<NodeJS.ErrnoException, void> =>\n  taskify<string, string, {flag: string}, NodeJS.ErrnoException, void>(\n    fs.writeFile\n  )(p, data, options);\n\nexport const copyFile = (\n  from: string,\n  to: string\n): TaskEither<NodeJS.ErrnoException, void> =>\n  taskify<string, string, NodeJS.ErrnoException, void>(fs.copyFile)(from, to);\n\nexport const copyFiles = (\n  files: string[],\n  dest: string\n): TaskEither<Error, void> =>\n  sequence(taskEither, array)(\n    files.map(f => copyFile(f, path.join(dest, path.basename(f))))\n  ).map(constUndefined);\n"]}